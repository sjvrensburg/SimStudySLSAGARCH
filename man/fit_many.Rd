% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_and_fit.R
\name{fit_many}
\alias{fit_many}
\title{Fit Many}
\usage{
fit_many(
  spec,
  param,
  ymat,
  se_type = "QMLE",
  label = sim_lab(n = nrow(ymat), lambda = param["lambda"], rho = param["rho"]),
  strategy = "sequential",
  nchunks = 100,
  .errorhandling = "remove",
  verbose = FALSE,
  ...
)
}
\arguments{
\item{spec}{specification object create by \code{SLSAGARCH2::specification}}

\item{param}{true parameters of the DGP}

\item{ymat}{matrix of simulated observations}

\item{se_type}{method for calculating the standard errors}

\item{label}{a label used to identify the simulation}

\item{strategy}{evaluation function (or name of it) to use for resolving a future. If NULL, then the current strategy is returned.}

\item{nchunks}{controls the number of realisations to pass to each thread}

\item{.errorhandling}{specifies how a task evaluation error should be handled. If the value is "stop", then execution will be stopped via the stop function if an error occurs. If the value is "remove", the result for that task will not be returned, or passed to the .combine function. If it is "pass", then the error object generated by task evaluation will be included with the rest of the results. It is assumed that the combine function (if specified) will be able to deal with the error object. The default value is "stop".}

\item{verbose}{logical flag enabling verbose messages}

\item{...}{}
}
\value{
a dataframe
}
\description{
Fit Many
}
\details{
This function creates a \code{progressor} that signals progress updates. The user
can run the function inside of a \code{with_progress} function to show a progress
bar.
}
